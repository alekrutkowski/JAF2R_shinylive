[{"name":"app.R","content":"library(shiny)\r\nlibrary(plotly)\r\nlibrary(data.table)\r\nlibrary(magrittr)\r\nlibrary(kit)\r\nlibrary(openxlsx)\r\n# dev mode: setwd('app')\r\n\r\nIS_SHINYLIVE <- \r\n  grepl(\"wasm\",R.Version()$arch)\r\n\r\nMY_MACHINE <-\r\n  Sys.getenv('USER')=='alek' || Sys.getenv('username')=='rutkoal'\r\n\r\n`%not in%` <- Negate(`%in%`)\r\n\r\nlink <- function(url, txt)\r\n  paste0('<a href=\"',url,'\" target=\"_blank\">',txt,'<\/a>')\r\n\r\nDATA <- \r\n  tryCatch(\r\n    suppressWarnings(readRDS('data.Rds')), # on HuggingFace\r\n    error=function(e) # otherwise\r\n      'data.Rds' %>% \r\n      {`if`(IS_SHINYLIVE || !MY_MACHINE,\r\n            (.) %T>% \r\n              download.file(\r\n                paste0('https://raw.githubusercontent.com/alekrutkowski/JAF2R_shinylive/main/data/',\r\n                       .),\r\n                .),\r\n            paste0('../data/',.)\r\n      )} %>% \r\n      readRDS()\r\n  )\r\n\r\n`JAF_KEY->PA_string` <- function(JAF_KEY)\r\n  sub(\"PA(.*?)\\\\.(C|O|S).*\",'\\\\1',JAF_KEY) # e.g. PA11c.S1.T -> 11c ; PA7.2.S2.F -> 7.2\r\n\r\n`JAF_KEY->C_O_S_part` <- function(JAF_KEY)\r\n  sub(\"PA(.*?)\\\\.(C|O|S)(.+?)\\\\..*\",'\\\\2\\\\3',JAF_KEY) # e.g. PA11c.S1.T -> S1 ; PA1.O1. -> O1\r\n\r\nsort_JAF_KEY <- function(JAF_KEY) {\r\n  pa <-\r\n    JAF_KEY %>% \r\n    `JAF_KEY->PA_string` %>% \r\n    list(as.numeric(gsub('[^0-9.]',\"\",.)),\r\n         .)\r\n  mid <- \r\n    JAF_KEY %>% \r\n    `JAF_KEY->C_O_S_part` %>% \r\n    {list(substr(.,1,1) %>% kit::nswitch('O',1L, 'S',2L, 'C',3L,\r\n                                         default=4L),\r\n          substr(.,2,nchar(.)) %>% as.integer())}\r\n  JAF_KEY %>% \r\n    .[order(pa[[1]],pa[[2]],mid[[1]],mid[[2]],.)]\r\n}\r\n\r\norder_by_JAF_KEY <- function(dt)\r\n  dt$JAF_KEY %>% \r\n  sort_JAF_KEY() %>% \r\n  data.table(JAF_KEY=.,\r\n             .ordering.=seq_along(.)) %>% \r\n  merge(dt, by='JAF_KEY') %>% \r\n  setorder(.ordering.) %>% \r\n  .[, .ordering. := NULL]\r\n\r\nMain_Indicators_Codes <-\r\n  DATA %>% \r\n  .$JAF_NAMES_DESCRIPTIONS %>%\r\n  .[(for_Main), JAF_KEY] %>%\r\n  sort_JAF_KEY()\r\n\r\n# Indicator_Codes_by_PA <-\r\n#   DATA %>% \r\n#   .$JAF_NAMES_DESCRIPTIONS %>% \r\n#   .[,.(JAF_KEY)] %>% \r\n#   .[,PA := JAF_KEY %>% `JAF_KEY->PA_string`()] %>% \r\n#   split(by='PA', keep.by=FALSE)\r\n\r\nINDICATORS <-\r\n  DATA$JAF_SCORES %>% \r\n  .[,.(JAF_KEY,Description)] %>% \r\n  unique() %>% \r\n  order_by_JAF_KEY() %>% \r\n  .[, JAF_KEY__Description :=\r\n      paste0('[',JAF_KEY,'] ',Description %>% gsub(' ,',\",\",.,fixed=TRUE))] %>% \r\n  {set_names(.$JAF_KEY,\r\n             .$JAF_KEY__Description)} %>% # key/name = '[JAF_KEY] Description', value = 'JAF_KEY'\r\n  c('\\u2295 Select all Main Indicators (can be slow!)',\r\n    '\\u2296 Remove all the selected indicators',\r\n    .)\r\n\r\n# filteredSelectedIndics <- function(SelectedIndics)\r\n#   SelectedIndics %>% \r\n#   `if`(is.character(.) && length(.)==1 && .==INDICATORS['All Main Indicators'],\r\n#        Main_Indicators_Codes,\r\n#        .)\r\n\r\nGEOS <-\r\n  DATA$EU_Members_geo_names %>% \r\n  .[, geo__geo_labels :=\r\n      paste0('[',geo,'] ',geo_labels)] %>% \r\n  {c('\\u2295 Select all the Member States',\r\n     '\\u2296 Remove all the selected countries',\r\n     set_names(as.list(.$geo),.$geo__geo_labels))} # key/name = '[geo] geo_labels', value = 'geo'\r\n\r\n# filteredSelectedGeos <- function(SelectedGeos)\r\n#   SelectedGeos %>% \r\n#   `if`(is.character(.) && length(.)==1 && .==GEOS['All Member States'],\r\n#        DATA$EU_Members_geo_names$geo %>% .[nchar(.)==2],\r\n#        .)\r\n\r\nYEARS <-\r\n  DATA$JAF_GRAND_TABLE_reduced %>% \r\n  unique() %>% \r\n  .$time %>% \r\n  as.integer() %>% \r\n  .[.>=2000]\r\n\r\nifScoresSelected <- function(input, x, y)\r\n  if (identical(input$SelectedScore,'TRUE')) x else y\r\n\r\nifLevelsSelected <- function(input, x, y)\r\n  if (identical(input$SelectedLevel,'TRUE')) x else y\r\n\r\nselectedVarname <- function(input) {\r\n  x <- identical(input$SelectedScore,'TRUE')\r\n  y <- identical(input$SelectedLevel,'TRUE')\r\n  kit::nif(x && y, 'score_latest_value',\r\n           x && !y, 'score_change',\r\n           !x && y, 'value_',\r\n           !x && !y, 'value_change')\r\n}\r\n\r\nfilteredDATA <- function(jaf_key, input)\r\n  DATA %>% \r\n  .[[ifScoresSelected(input, 'JAF_SCORES','JAF_GRAND_TABLE_reduced')]] %>% \r\n  .[JAF_KEY %in% jaf_key]\r\n\r\nhist. <- function(input) {\r\n  lapply(X=input$SelectedIndics,\r\n         input=input,\r\n         FUN=function(single_indic, input) {\r\n           if (input$toggle) return(NULL)\r\n           var.. <-\r\n             selectedVarname(input)\r\n           dta <-\r\n             filteredDATA(single_indic,input) %>%\r\n             .[!is.na(.[[var..]])] %>% \r\n             .[, geo := as.character(geo)] %>% \r\n             .[, .SD[time==max(time)], by=geo] %>% \r\n             .[, geo := ifelse(time==max(time),geo,paste0(geo,' (',time,')'))]\r\n           val.. <-\r\n             dta[grepl(input$SelectedGeos,geo), var.., with=FALSE] %>% as.numeric()\r\n           valEU.. <-\r\n             dta[geo==DATA$EU_geo_code, var.., with=FALSE] %>% as.numeric()\r\n           summaries.. <-\r\n             dta[, var.., with=FALSE] %>% \r\n             .[[1]] %>% \r\n             {list(p25=quantile(.,.25),\r\n                   med=median(.),\r\n                   p75=quantile(.,.75))}\r\n           hist.. <-\r\n             dta %>% \r\n             .[geo %not in% c(DATA$EU_geo_code,DATA$EA_geo_code), \r\n               c(var..,'geo'), with=FALSE] %>% {\r\n                 d. <- (.)\r\n                 h. <- hist(d.[[var..]],plot=FALSE)\r\n                 l. <- d. %>% \r\n                   .[, in_bin_no := \r\n                       cut(d.[[var..]], breaks=h.$breaks,\r\n                           include.lowest=TRUE, right=FALSE, labels=F)] %>% \r\n                   .[, .(l = geo %>% \r\n                           paste(collapse=', ') %>% \r\n                           strwrap(10) %>% \r\n                           paste(collapse='\\n'))\r\n                     , by=in_bin_no] %>% \r\n                   setorder(in_bin_no)\r\n                 data.table(in_bin_no=seq_along(h.$mids),\r\n                            x=h.$mids,\r\n                            y=h.$counts) %>% \r\n                   merge(l., by='in_bin_no', all.x=TRUE)\r\n               }\r\n           addVerticalLine <- function(pl, name, x, color, dash='solid')\r\n             add_trace(pl,\r\n                       name=name,\r\n                       x = x %>% c(., .),\r\n                       y = c(0, max(hist..$y)),\r\n                       text = c(\"\",\"\"), # mandatory\r\n                       type = \"scatter\", mode = \"lines\",\r\n                       marker = list(opacity=0),\r\n                       line = list(color=color, dash=dash, width=3))\r\n           plot_ly(x=hist..$x, y=hist..$y,\r\n                   text=hist..$l,\r\n                   type=\"bar\",\r\n                   marker = list(color='#D3D3D3'),\r\n                   name=\"All countries\") %>% \r\n             layout(title=paste0(names(INDICATORS)[INDICATORS==single_indic],\r\n                                 ', ',max(dta$time),\r\n                                 '\\nThe value for ',names(GEOS)[GEOS==input$SelectedGeos],\r\n                                 ' and the distribution of values across other countries (a histogram)'),\r\n                    xaxis=list(title=list(text=paste0(ifScoresSelected(input, 'Score ', 'Indicator value '),\r\n                                                      ifLevelsSelected(input, '(level)', '(change)')),\r\n                                          font=list(size=18))),\r\n                    yaxis=list(title='Number of countries inside each interval'),\r\n                    bargap = 0,\r\n                    margin = list(t = 60), # more space at the top for the title\r\n                    annotations = list(\r\n                      x=val..,\r\n                      y=max(hist..$y),\r\n                      text=paste0(grep(input$SelectedGeos,dta$geo,value=TRUE),': ',round(val..,1)),\r\n                      showarrow=TRUE,\r\n                      arrowhead=5,\r\n                      font=list(size=18)\r\n                    )) %>%\r\n             addVerticalLine(name=paste0(grep(input$SelectedGeos,dta$geo,value=TRUE),': ',\r\n                                         round(val..,1)),\r\n                             x = val..,\r\n                             color='black') %>%\r\n             addVerticalLine(name=paste('25th percentile:',round(summaries..$p25,1)),\r\n                             x = summaries..$p25,\r\n                             color='magenta', dash='dash') %>%\r\n             addVerticalLine(name=paste('75th percentile:',round(summaries..$p75,1)),\r\n                             x = summaries..$p75,\r\n                             color='chartreuse', dash='dash') %>% \r\n             addVerticalLine(name=paste('Median:',round(summaries..$med,1)),\r\n                             x = summaries..$med,\r\n                             color='cyan', dash='dot') %>% \r\n             addVerticalLine(name=paste('EU:',round(valEU..,1)),\r\n                             x = valEU..,\r\n                             color='blue', dash='dot') %>% \r\n             renderPlotly()  \r\n         })\r\n}\r\n\r\n# sortedBarChart_plot <- function(input,\r\n#                                 xcatvarname,\r\n#                                 marked=NULL,\r\n#                                 byvarname='JAF_KEY') {\r\n#   \r\n# }\r\n# \r\n# if (input$SelectedScore=='TRUE' && input$SelectedIndics>1) \r\n#   sortedBarChart_plot(input, xcatvarname='JAF_KEY', marked=input$SelectedGeos, byvarname=NULL) else\r\n#     sortedBarChart_plot(input, xcatvarname='geo')\r\n\r\n\r\nsortedBarChart. <- function(input) {\r\n  lapply(X=input$SelectedIndics,\r\n         input=input,\r\n         FUN=function(single_indic, input) {\r\n           if (input$toggle) return(NULL)\r\n           var.. <-\r\n             selectedVarname(input)\r\n           dta <-\r\n             filteredDATA(single_indic,input) %>%\r\n             .[!is.na(.[[var..]])] %>% \r\n             .[, .SD[time==max(time)], by=geo] %>% \r\n             .[, geo := as.character(geo)]\r\n           dta_with_ordered_geos <-\r\n             dta %>% \r\n             .[geo %in% input$SelectedGeos] %>% \r\n             .[, geo := ifelse(time==max(time),geo,paste0(geo,'\\n(',time,')'))] %>% \r\n             .[, geo := factor(geo,levels=geo[order(get(var..),decreasing=TRUE)],ordered=TRUE)]\r\n           valEU.. <-\r\n             dta[geo==DATA$EU_geo_code, var.., with=FALSE] %>% as.numeric()\r\n           addHorizontalLine <- function(pl, name, y, color, dash='solid')\r\n             add_trace(pl,\r\n                       name=name,\r\n                       y = rep(y, length(dta_with_ordered_geos$geo)),\r\n                       x = dta_with_ordered_geos$geo,\r\n                       # text = c(\"\",\"\"), # mandatory\r\n                       type = \"scatter\", mode = \"lines\",\r\n                       marker = list(opacity=0),\r\n                       line = list(color=color, dash=dash, width=3))\r\n           plot_ly(x=dta_with_ordered_geos$geo, y=dta_with_ordered_geos[[var..]],\r\n                   text = round(dta_with_ordered_geos[[var..]],1), # Add data labels\r\n                   textposition = 'outside',\r\n                   type=\"bar\",\r\n                   marker = list(color='#D3D3D3'),\r\n                   name=\"Selected countries\") %>% \r\n             layout(title=paste0(names(INDICATORS)[INDICATORS==single_indic],\r\n                                 ', ',max(dta$time)),\r\n                    xaxis=list(title=NULL),\r\n                    yaxis=list(title=list(text=paste0(ifScoresSelected(input, 'Score ', 'Indicator value '),\r\n                                                      ifLevelsSelected(input, '(level)', '(change)')),\r\n                                          font=list(size=18))),\r\n                    bargap = 5,\r\n                    margin = list(t=60) # more space at the top for the title\r\n             ) %>%\r\n             addHorizontalLine(name=paste('EU:',round(valEU..,1)),\r\n                               y = valEU..,\r\n                               color='blue') %>%\r\n             renderPlotly()  \r\n         })\r\n}\r\n\r\nsortedHorizBarChart. <- function(input) {\r\n  var.. <-\r\n    selectedVarname(input)\r\n  dta <-\r\n    filteredDATA(input$SelectedIndics,input) %>%\r\n    .[!is.na(.[[var..]])] %>% \r\n    .[, .SD[time==max(time)], by=.(geo,JAF_KEY)]\r\n  dta_with_ordered_indics <-\r\n    copy(dta) %>% \r\n    .[, geo := as.character(geo)] %>% \r\n    .[geo == input$SelectedGeos] %>% \r\n    merge(DATA$JAF_SCORES %>% \r\n            .[,.(JAF_KEY,Description)] %>% \r\n            unique() %>% \r\n            .[, JAF_KEY__Description :=\r\n                paste0('[',JAF_KEY,'] ',Description)],\r\n          by='JAF_KEY') %>% \r\n    .[, JAF_KEY__Description := ifelse(time==max(time),\r\n                                       paste0(JAF_KEY__Description,' '),\r\n                                       paste0(JAF_KEY__Description,', ',time,' '))] %>% \r\n    .[, JAF_KEY := factor(JAF_KEY__Description,\r\n                          levels=JAF_KEY__Description[order(get(var..),decreasing=TRUE)],\r\n                          ordered=TRUE)]\r\n  plot_ly(y=dta_with_ordered_indics$JAF_KEY,\r\n          x=dta_with_ordered_indics[[var..]],\r\n          text = round(dta_with_ordered_indics[[var..]],1), # Add data labels\r\n          textposition = 'outside',\r\n          type=\"bar\",\r\n          marker = list(color='#D3D3D3'),\r\n          name=\"Selected countries\",\r\n          height=100+30*length(dta_with_ordered_indics$JAF_KEY)) %>% \r\n    layout(title=paste0(names(GEOS)[GEOS==input$SelectedGeos],', ',max(dta_with_ordered_indics$time)),\r\n           yaxis=list(title=NULL, showgrid=TRUE, gridcolor='#f5f5f5', gridwidth=1),\r\n           xaxis=list(title=list(text=paste0(ifScoresSelected(input, 'Score ', 'Indicator value '),\r\n                                             ifLevelsSelected(input, '(level)', '(change)')),\r\n                                 font=list(size=18))),\r\n           bargap = 5,\r\n           margin = list(t=60) # more space at the top for the title\r\n    ) %>%\r\n    renderPlotly()  \r\n}\r\n\r\nbasicLinePlot. <- function(input) {\r\n  lapply(X=input$SelectedIndics,\r\n         input=input,\r\n         FUN=function(single_indic, input) {\r\n           if (input$toggle) return(NULL)\r\n           var.. <-\r\n             selectedVarname(input)\r\n           dta <-\r\n             filteredDATA(single_indic,input) %>%\r\n             .[!is.na(.[[var..]])] %>% \r\n             .[, geo := as.character(geo)] %>% \r\n             .[, time := as.integer(time)] %>% \r\n             .[as.integer(input$SelectedYears)<=time] %>% \r\n             .[geo %in% input$SelectedGeos]\r\n           if (length(unique(dta$time))==1)\r\n             return(return(renderUI(div(class=\"red-frame\",\r\n                                        paste0(single_indic,': No time series, only one time point is available')))))\r\n           plot_ly(x=dta$time, y=dta[[var..]],\r\n                   color=as.factor(dta$geo),\r\n                   text = round(dta[[var..]],1), # Add data labels\r\n                   textposition = 'outside',\r\n                   type=\"scatter\", mode='lines' #,\r\n                   # marker = list(color='#D3D3D3') # ,\r\n                   # name=\"Selected countries\"\r\n           ) %>% \r\n             layout(title=paste0(names(INDICATORS)[INDICATORS==single_indic],\r\n                                 ifelse(length(input$SelectedGeos)==1,\r\n                                        paste0(', ',names(GEOS)[GEOS==input$SelectedGeos]),\"\")) %>% \r\n                      strwrap(60) %>% paste(collapse='<br>'),\r\n                    xaxis=list(title=NULL,\r\n                               dtick = 1, # Set gridlines at every integer\r\n                               tickmode = \"linear\",\r\n                               range=c(min(dta$time),max(dta$time))),\r\n                    yaxis=list(title=list(text=paste0(ifScoresSelected(input, 'Score ', 'Indicator value '),\r\n                                                      ifLevelsSelected(input, '(level)', '(change)')),\r\n                                          font=list(size=18))),\r\n                    margin = list(t=60) # more space at the top for the title\r\n             ) %>%\r\n             renderPlotly() %>% \r\n             span(style=\"width:50%;\",.)  \r\n         })\r\n}\r\n\r\nlinePlotGeoEU. <- function(input) {\r\n  lapply(X=input$SelectedIndics,\r\n         input=input,\r\n         FUN=function(single_indic, input) {\r\n           if (input$toggle) return(NULL)\r\n           var.. <-\r\n             selectedVarname(input)\r\n           dta <-\r\n             filteredDATA(single_indic,input) %>%\r\n             .[!is.na(.[[var..]])] %>% \r\n             .[, geo := as.character(geo) %>% \r\n                 factor(levels=rev(c(input$SelectedGeos,\r\n                                     unique(grep('^EU',geo,value=TRUE)),\r\n                                     unique(grep('^EA',geo,value=TRUE)))) %>% \r\n                          c(setdiff(unique(geo),.),.) # important so that the selected country is in front\r\n                 )] %>% \r\n             .[, time := as.integer(time)] %>% \r\n             .[as.integer(input$SelectedYears)<=time]#  %>% \r\n           # .[geo %in% input$SelectedGeos]\r\n           if (length(unique(dta$time))==1)\r\n             return(return(renderUI(div(class=\"red-frame\",\r\n                                        paste0(single_indic,': No time series, only one time point is available')))))\r\n           plot_ly(x=dta$time, y=dta[[var..]],\r\n                   color=dta$geo,\r\n                   colors=kit::nif(\r\n                     grepl('^EU',dta$geo), 'blue',\r\n                     grepl('^EA',dta$geo), 'lightblue',\r\n                     dta$geo==input$SelectedGeos, 'black',\r\n                     default='#e6e6e6'\r\n                   ) %>% set_names(dta$geo),\r\n                   text = round(dta[[var..]],1), # Add data labels\r\n                   textposition = 'outside',\r\n                   type=\"scatter\", mode='lines',\r\n                   height=700\r\n           ) %>% \r\n             layout(title=paste0(names(INDICATORS)[INDICATORS==single_indic],\r\n                                 ifelse(length(input$SelectedGeos)==1,\r\n                                        paste0(', ',names(GEOS)[GEOS==input$SelectedGeos]),\"\")) %>% \r\n                      strwrap(60) %>% paste(collapse='<br>'),\r\n                    xaxis=list(title=NULL,\r\n                               dtick = 1, # Set gridlines at every integer\r\n                               tickmode = \"linear\",\r\n                               range=c(min(dta$time),max(dta$time))),\r\n                    yaxis=list(title=list(text=paste0(ifScoresSelected(input, 'Score ', 'Indicator value '),\r\n                                                      ifLevelsSelected(input, '(level)', '(change)')),\r\n                                          font=list(size=18))),\r\n                    margin = list(t=60), # more space at the top for the title\r\n                    legend = list(font = list(size = 8))\r\n             ) %>%\r\n             renderPlotly() %>% \r\n             span(style=\"height:710px;width:50%;\",.) # 710px needed to avoid the vertical truncations in a list of plots\r\n         })\r\n}\r\n\r\ncolorPalette <- \r\n  colorRamp(c(\"darkred\",\"white\",\"green\"))\r\n\r\nmode. <- function(x) {\r\n  data.table(value = x) %>%\r\n    .[, .N, by = value] %>%\r\n    .[N == max(N)] %>%\r\n    .$value %>%\r\n    as.numeric() %>% \r\n    `if`(length(.)==1,.,\r\n         max(.))\r\n}\r\n\r\nannot. <- function(num_vec)\r\n  num_vec %>% \r\n  paste0('<br><sup>',.,'<\/sup>')\r\n# {ifelse(.<0, strrep(\"<sup><sub>*<\/sub><\/sup>\",abs(.)), strrep(\"<sup><sub>#<\/sub><\/sup>\",abs(.)))}\r\n\r\nheatmapGrid. <- function(input) {\r\n  var.. <-\r\n    selectedVarname(input)\r\n  dta <-\r\n    filteredDATA(input$SelectedIndics,input) %>%\r\n    .[!is.na(.[[var..]])] %>% \r\n    .[, .SD[time==max(time)], by=.(geo,JAF_KEY)]\r\n  dta_with_ordered_indics <-\r\n    copy(dta) %>% \r\n    .[, geo := as.character(geo)] %>% \r\n    .[geo %in% input$SelectedGeos] %>% \r\n    merge(DATA$JAF_SCORES %>% \r\n            .[,.(JAF_KEY,Description)] %>% \r\n            unique() %>% \r\n            .[, JAF_KEY__Description :=\r\n                paste0('[',JAF_KEY,'] ',Description)],\r\n          by='JAF_KEY') %>% \r\n    # .[, JAF_KEY__Description := ifelse(time==max(time),\r\n    #                                    paste0(JAF_KEY__Description,' '),\r\n    #                                    paste0(JAF_KEY__Description,', ',time,' '))] %>% \r\n    ### TODO -- correct\r\n    # .[,JAF_KEY__Description := JAF_KEY__Description %>% \r\n    #     strwrap(60) %>% paste(collapse='<br>')\r\n    #   ,by=.I] %>% \r\n    .[, JAF_KEY := factor(JAF_KEY__Description,\r\n                          levels=.[,.(JAF_KEY__Description,JAF_KEY)] %>% \r\n                            unique() %>% \r\n                            order_by_JAF_KEY() %>% \r\n                            .$JAF_KEY__Description,\r\n                          ordered=TRUE)] %>% \r\n    .[, mode := mode.(time)]\r\n  plot_ly(y=dta_with_ordered_indics$JAF_KEY,\r\n          x=dta_with_ordered_indics$geo,\r\n          z=dta_with_ordered_indics[[var..]],\r\n          colors = colorPalette,\r\n          text = round(dta_with_ordered_indics[[var..]],1) %>% # Add data labels\r\n            paste0(ifelse(dta_with_ordered_indics$time!=dta_with_ordered_indics$mode,\r\n                          # annot.(dta_with_ordered_indics$time-dta_with_ordered_indics$mode),\r\n                          annot.(dta_with_ordered_indics$time),\r\n                          \"\")),\r\n          texttemplate = \"%{text}\",\r\n          textfont = list(size = 8),\r\n          type=\"heatmap\",\r\n          colorbar = list(\r\n            len = 0.7, # Length of the color bar (0 to 1, fraction of plot dimension)\r\n            thickness = 20, # Thickness of the color bar\r\n            y=-6.92/(length(input$SelectedIndics)+2.58), \r\n            yanchor = \"bottom\", # Anchor point\r\n            orientation = 'h' # Horizontal orientation\r\n          ),\r\n          height=350+22*length(unique(dta_with_ordered_indics$JAF_KEY))) %>% \r\n    add_trace(\r\n      hoverinfo = 'text',\r\n      hovertemplate = \"%{x}<br>%{y}<br>%{text}<extra><\/extra>\"\r\n    ) %>% \r\n    layout(title=paste('\"Heatmap\": the greener the colour, the better; the more red the colour, the worse\\n',\r\n                       mode.(dta_with_ordered_indics$time),\r\n                       'unless indicated otherwise inside the plot cells'),\r\n           yaxis=list(title=NULL, showgrid=TRUE, gridcolor='#f5f5f5', gridwidth=1),\r\n           xaxis=list(title=list(text=paste0(ifScoresSelected(input, 'Score ', 'Indicator value '),\r\n                                             ifLevelsSelected(input, '(level)', '(change)')),\r\n                                 font=list(size=18))),\r\n           margin = list(t=100,b=200), # more space at the top for the title\r\n           coloraxis = list(\r\n             colorbar = list(\r\n               bordercolor = \"transparent\",\r\n               borderlinewidth = 0,\r\n               outlinewidth = 0\r\n             ))\r\n    ) %>%\r\n    renderPlotly()  \r\n}\r\n\r\nrenderMsg <- function(txt)\r\n  renderPlotly({\r\n    # Create a blank plot\r\n    plot_ly(height=100) %>%\r\n      layout(\r\n        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\r\n        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\r\n        annotations = list(\r\n          list(\r\n            text = txt,\r\n            x = 0,\r\n            y = 0,\r\n            xref = \"paper\",\r\n            yref = \"paper\",\r\n            showarrow = FALSE,\r\n            font = list(\r\n              size = 14\r\n            )\r\n          )\r\n        )\r\n      ) %>% \r\n      config(displaylogo = FALSE, modeBarButtonsToRemove = c(\"sendDataToCloud\", \"toImage\", \"select2d\", \"lasso2d\", \"resetScale2d\"), showLink = FALSE)\r\n  })\r\n\r\nrenderTbl <- function(input) {\r\n  i <- length(input$SelectedIndics)\r\n  s <- identical(input$SelectedScore,'TRUE')\r\n  g <- length(input$SelectedGeos)\r\n  y <- input$SelectedYears < max(YEARS)\r\n  if (input$toggle)\r\n    return(renderMsg('&#9888; App suspended by the user'))\r\n  if (i==0 || g==0 ||\r\n      i==1 && grepl('Remove all the selected',input$SelectedIndics) ||\r\n      g==1 && grepl('Remove all the selected',input$SelectedGeos)) \r\n    return(renderMsg('&#9432; Please select one or more indicators and one or more countries'))\r\n  var.. <-\r\n    selectedVarname(input)\r\n  dt <-\r\n    filteredDATA(input$SelectedIndics,input) %>%\r\n    .[geo %in% input$SelectedGeos] %>%\r\n    `if`('Description' %in% colnames(.),\r\n         .,\r\n         merge(.,DATA$JAF_SCORES %>% \r\n                 .[,.(JAF_KEY,Description)] %>% \r\n                 .[,Description := gsub(' ,',\",\",Description,fixed=TRUE)] %>% \r\n                 unique(),\r\n               by='JAF_KEY')) %>% \r\n    {`if`(!identical(input$SelectedScore,'TRUE'), \r\n          .[input$SelectedYears <= time],\r\n          .[, .SD[time==max(time)], by=.(JAF_KEY,geo)])} %>% \r\n    .[, c('JAF_KEY','Description','geo','time',var..), with=FALSE] %>% \r\n    .[, (var..) := round(get(var..),1)]\r\n  if (nrow(dt)==0)\r\n    return(renderMsg('&#9432; Empty table: please select a lower time-series start year or tick \"show standardised scores\"'))\r\n  dt2 <-\r\n    dcast(dt, JAF_KEY + Description + geo ~ time) %>% \r\n    # setnames(c('JAF_KEY','Description','geo','time',var..),\r\n    #          c('Indicator Code','Indicator Description','Country','Year',\r\n    #            paste(ifelse(identical(input$SelectedScore,'TRUE'),'Score','Value'),\r\n    #                  ifelse(identical(input$SelectedLevel,'TRUE'),'Level','Change'))))\r\n    setnames(c('JAF_KEY','Description','geo'),\r\n             c('Indicator Code','Indicator Description','Country'))\r\n  plot_ly(\r\n    type = 'table',\r\n    height=800, # 100+30*max(nrow(dt2),50),\r\n    header = list(\r\n      values = names(dt2) %>% paste0('<b>',.,'<\/b>'),\r\n      # font=list(style='bold')\r\n      # align = c('left', rep('center', ncol(dt))),\r\n      # line = list(width = 1, color = 'black'),\r\n      fill = list(color = '#efefef')\r\n      # font = list(family = \"Arial\", size = 14, color = \"white\")\r\n    ),\r\n    cells = list(\r\n      values = t(as.matrix(unname(head(dt2,100)))) %>% ifelse(is.na(.),\"\",.) #,\r\n      # align = c('left', rep('center', ncol(dt))),\r\n      # line = list(color = \"black\", width = 1),\r\n      # fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),\r\n      # font = list(family = \"Arial\", size = 12, color = c(\"black\"))\r\n    )) %>% \r\n    layout(title=paste(ifelse(identical(input$SelectedScore,'TRUE'),'Score','Value'),\r\n                       ifelse(identical(input$SelectedLevel,'TRUE'),'Level','Change'))) %>% \r\n    config(displaylogo = FALSE, modeBarButtonsToRemove = c(\"sendDataToCloud\", \"toImage\", \"select2d\", \"lasso2d\", \"resetScale2d\"), showLink = FALSE) %>% \r\n    {div(\r\n      div(if (nrow(dt2)>100) HTML('<br>&#9888; Large table: only top 100 rows will be shown, but you will be able to download the full table')),\r\n      div(renderPlotly(.)))}\r\n}\r\n\r\ndataForExcel. <- function(input) {\r\n  var.. <-\r\n    selectedVarname(input)\r\n  filteredDATA(input$SelectedIndics,input) %>%\r\n    .[geo %in% input$SelectedGeos] %>%\r\n    `if`('Description' %in% colnames(.),\r\n         .,\r\n         merge(.,DATA$JAF_SCORES %>% \r\n                 .[,.(JAF_KEY,Description)] %>% \r\n                 .[,Description := gsub(' ,',\",\",Description,fixed=TRUE)] %>% \r\n                 unique(),\r\n               by='JAF_KEY')) %>% \r\n    {`if`(!identical(input$SelectedScore,'TRUE'), \r\n          .[input$SelectedYears <= time],\r\n          .[, .SD[time==max(time)], by=.(JAF_KEY,geo)])} %>% \r\n    .[, c('JAF_KEY','Description','geo','time',var..), with=FALSE] %>% \r\n    .[, (var..) := round(get(var..),1)] %>% \r\n    dcast(JAF_KEY + Description + geo ~ time) %>% \r\n    setnames(c('JAF_KEY','Description','geo'),\r\n             c('Indicator Code','Indicator Description','Country'))\r\n}\r\n\r\nselectPlots <- function(input) {\r\n  i <- length(input$SelectedIndics)\r\n  s <- identical(input$SelectedScore,'TRUE')\r\n  g <- length(input$SelectedGeos)\r\n  y <- input$SelectedYears < max(YEARS)\r\n  if (input$toggle) return(renderMsg('&#9888; App suspended by the user'))\r\n  if (i==0 || g==0 ||\r\n      i==1 && grepl('Remove all the selected',input$SelectedIndics) ||\r\n      g==1 && grepl('Remove all the selected',input$SelectedGeos) \r\n  ) return(renderMsg('&#9432; Please select one or more indicators and one or more countries'))\r\n  if(i==1 &&  s && g==1 && !y) return(hist.(input)) # \r\n  if(i> 1 &&  s && g==1 && !y) return(sortedHorizBarChart.(input)) # \r\n  if(i==1 &&  s && g> 1 && !y) return(sortedBarChart.(input)) # \r\n  if(i> 1 &&  s && g> 1 && !y) return(heatmapGrid.(input)) # \r\n  if(i==1 &&  s && g==1 &&  y) return(hist.(input)) # multiple years ignored -- showing only the latest year\r\n  if(i> 1 &&  s && g==1 &&  y) return(sortedHorizBarChart.(input)) # multiple years ignored -- showing only the latest year\r\n  if(i==1 &&  s && g> 1 &&  y) return(sortedBarChart.(input)) # multiple years ignored -- showing only the latest year\r\n  if(i> 1 &&  s && g> 1 &&  y) return(heatmapGrid.(input)) # multiple years ignored -- showing only the latest year\r\n  if(i==1 && !s && g==1 && !y) return(hist.(input)) # \r\n  if(i> 1 && !s && g==1 && !y) return(hist.(input)) # lapply(by indicator) due to different units\r\n  if(i==1 && !s && g> 1 && !y) return(sortedBarChart.(input)) # \r\n  if(i> 1 && !s && g> 1 && !y) return(sortedBarChart.(input)) # lapply(by indicator) due to different units\r\n  if(i==1 && !s && g==1 &&  y) return(linePlotGeoEU.(input)) # lapply(by indicator) due to different units\r\n  if(i> 1 && !s && g==1 &&  y) return(linePlotGeoEU.(input)) # lapply(by indicator) due to different units\r\n  if(i==1 && !s && g> 1 &&  y) return(basicLinePlot.(input)) # \r\n  if(i> 1 && !s && g> 1 &&  y) return(basicLinePlot.(input)) # lapply(by indicator) due to different units\r\n}\r\n\r\nkbd_info <-\r\n  'use <kbd>Delete<\/kbd> or <kbd>Backspace<\/kbd> keyboard keys to delete, use <kbd>Esc<\/kbd> to hide the drop-down menu.'\r\n\r\n# App ---------------------------------------------------------------------\r\n\r\nui <- fluidPage(\r\n  tags$head(\r\n    tags$style(HTML(\"\r\n    .flex-container {\r\n      display: flex;\r\n      justify-content: space-between;\r\n    }\r\n    .left-text {\r\n      /* Optional styling for left text */\r\n    }\r\n    .right-text {\r\n      /* Optional styling for right text */\r\n    }\r\n    .irs-bar, .irs-bar-edge {\r\n        background: transparent !important;\r\n        border-color: transparent !important;\r\n    }\r\n            #loading {\r\n                position: fixed;\r\n                top: 50%;\r\n                left: 50%;\r\n                margin-top: -50px;\r\n                margin-left: -50px;\r\n                z-index: 100;\r\n                display: none;\r\n            }\r\n\r\n            .spinner {\r\n                width: 100px;\r\n                height: 100px;\r\n                border: 16px solid #f3f3f3;\r\n                border-top: 16px solid #3498db;\r\n                border-radius: 50%;\r\n                animation: spin 2s linear infinite;\r\n            }\r\n\r\n            @keyframes spin {\r\n                0% { transform: rotate(0deg); }\r\n                100% { transform: rotate(360deg); }\r\n            }\r\n\r\n            .switch {\r\n              position: relative;\r\n              display: inline-block;\r\n              width: 60px; /* Width of the switch */\r\n              height: 34px; /* Height of the switch */\r\n            }\r\n\r\n            .switch input {\r\n              opacity: 0;\r\n              width: 0;\r\n              height: 0;\r\n            }\r\n\r\n            .slider {\r\n              position: absolute;\r\n              cursor: pointer;\r\n              top: 0;\r\n              left: 0;\r\n              right: 0;\r\n              bottom: 0;\r\n              background-color: #ccc;\r\n              -webkit-transition: .4s;\r\n              transition: .4s;\r\n              border-radius: 34px; /* Rounded corners of the switch */\r\n            }\r\n\r\n            .slider:before {\r\n              position: absolute;\r\n              content: '';\r\n              height: 20px; /* Height of the circle */\r\n              width: 20px;  /* Width of the circle */\r\n              left: 7px;    /* Position from the left */\r\n              bottom: 5px;  /* Position from the bottom */\r\n              background-color: black;\r\n              -webkit-transition: .4s;\r\n              transition: .4s;\r\n              border-radius: 50%; /* Makes the circle round */\r\n            }\r\n\r\n            input:checked + .slider {\r\n              background-color: red;\r\n            }\r\n\r\n            input:checked + .slider:before {\r\n              -webkit-transform: translateX(26px);\r\n              -ms-transform: translateX(26px);\r\n              transform: translateX(26px);\r\n            }\r\n    \r\n            .red-frame {\r\n                border: 1px solid red;  /* Red border */\r\n                border-radius: 10px;   /* Rounded corners */\r\n                padding: 10px;         /* Some padding around the text */\r\n                margin: 10px;          /* Margin around the div */\r\n                color: red;            /* Red text color */\r\n                display: inline-block; /* Make the div only as wide as its content */\r\n            }\r\n    \r\n    \")),\r\n    tags$script(HTML(\"\r\n            //var isShinyBusy = false;         \r\n            \r\n            function hideLoadingSpinnerFun() {\r\n                var element = document.getElementById('loading');\r\n                if (element) {\r\n                    $('#loading').hide();\r\n                }\r\n            }\r\n            \r\n            $(document).on('shiny:busy', function(event) {\r\n                //isShinyBusy = true;\r\n                $('#loading').show();\r\n                //setTimeout(hideLoadingSpinnerFun, 60000);\r\n            });\r\n\r\n           // $(document).on('shiny:idle', function(event) {\r\n          //      isShinyBusy = false;\r\n          //  });\r\n\r\n\r\n            $(document).on('plotly_afterplot', '.js-plotly-plot', function(event) {\r\n                //isShinyBusy = false;\r\n                $('#loading').hide();\r\n            });\r\n            \r\n            function EmptyTable() {\r\n                // Get all SVG elements in the document\r\n                const svgs = document.querySelectorAll('svg');\r\n                for (const svg of svgs) {\r\n                    // Find all <text> elements within the current SVG\r\n                    const textElements = svg.querySelectorAll('text');\r\n                    for (const textElement of textElements) {\r\n                        if (textElement.textContent.includes('Empty table')) {\r\n                            return true; // Return true as soon as we find a match\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            \r\n            function isLoadingSpinnerVisible() {\r\n              const elem = document.getElementById('loading');\r\n              // Check if the element exists\r\n              if (!elem) {\r\n                return false; // Element does not exist\r\n              }\r\n              // Get computed styles of the element\r\n              const style = window.getComputedStyle(elem);\r\n              // Check if the element is not hidden\r\n              return style.display !== 'none' && style.visibility !== 'hidden';\r\n            }\r\n            \r\n            $(document).on('shiny:connected', function(e) {\r\n              Shiny.addCustomMessageHandler('hideLoadingSpinner', function(message) {\r\n                $('#loading').hide();\r\n              });\r\n            });\r\n\r\n        \"))\r\n  ),\r\n  tags$div(id = \"loading\", class = \"spinner\"),\r\n  HTML(paste0('\r\n    <div class=\"flex-container\">\r\n      <div class=\"left-text\"><h1>JAF Indicators<\/h1><\/div>\r\n      <div style=\"padding-top: 28px;\"><a href=\"https://htmlpreview.github.io/?https://raw.githubusercontent.com/alekrutkowski/JAF2R_shinylive/main/www/Plot_Selection_Logic.html\" target=\"_blank\">&#9432; Plot type selection logic explained<\/a><\/div>\r\n      <div class=\"right-text\" style=\"padding-top: 20px;\">',\r\n    ifelse(IS_SHINYLIVE,link('https://shinylive.io/r/examples/','Shinylive'),link('https://shiny.posit.co/','Shiny')),'\r\n      <img src=\"https://raw.githubusercontent.com/alekrutkowski/JAF2R/main/JAF2R_logo_v3.png\" alt=\"JAF2R project logo\" height=\"40\"/>\r\n      <\/div>\r\n    <\/div>')), # TODO add above 'shiny' or 'shinylive' before the logo\r\n  # Checkbox input styled as a toggle switch\r\n  tags$div(class = \"switch\",\r\n           tags$input(id = \"toggle\", type = \"checkbox\", class = \"switch-input\"),\r\n           tags$label(`for` = \"toggle\", class = \"slider round\"),\r\n  ),\r\n  HTML('<sub><big><sub><big><big><strong>&nbsp;A switch to <span style=\"color:red;\">stop<\/span> \"reactivity\" i.e. stop all the calculations and pick many multiple selections below without immediate recalculation of the output<\/strong><\/big><\/big><\/sub><\/big><\/sub>'),\r\n  # textOutput('tmp'),\r\n  selectInput(\r\n    inputId = \"SelectedIndics\",\r\n    label = HTML(\"<strong><big><big>&#8505;&#65039;<\/big><\/big> Select one or more indicators: start typing codes or names,\",kbd_info,\"<br><\/strong>\",\r\n                 '<small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hint: Type <code>.O<\/code> to see \"Overall\" indicators or <code>.S<\/code> for \"Subindicators\" or <code>.C<\/code> for \"Context\" indicators in the dropdown menu list.',\r\n                 '&nbsp;Similarly, type e.g. <code>PA6a<\/code> to  see Policy Area 6a indicators.<\/small>'),\r\n    choices = INDICATORS,\r\n    multiple=TRUE,\r\n    width = \"100%\"\r\n  ),\r\n  selectInput(\r\n    inputId = \"SelectedGeos\",\r\n    label = HTML(\"<strong><big><big>&#x1F310;<\/big><\/big> Select countries or country aggregates,\",kbd_info,'<\/strong>'),\r\n    choices = GEOS,\r\n    multiple=TRUE,\r\n    width = \"100%\"\r\n  ),\r\n  fluidRow(\r\n    column(4,checkboxGroupInput(\r\n      inputId = \"SelectedScore\",\r\n      label = strong(\"Show standardised scores (latest year) or values (one or more years)?\"),\r\n      choices = c(\"Tick for scores, untick for values\" = 'TRUE'),\r\n      width = \"100%\"\r\n    )),\r\n    column(4,checkboxGroupInput(\r\n      inputId = \"SelectedLevel\",\r\n      label = strong(\"Show levels or changes?\"),\r\n      choices = c(\"Tick for levels, untick for changes\" = 'TRUE'),\r\n      selected='TRUE',\r\n      width = \"100%\"\r\n    )),\r\n    column(4,sliderInput(\r\n      inputId = \"SelectedYears\",\r\n      label = strong(\"Select a start year for time series of values (if you want to see a longer period, but only the available years will be displayed).\"),\r\n      min = min(YEARS),\r\n      max = max(YEARS),\r\n      ticks=FALSE,\r\n      sep=\"\",\r\n      value = max(YEARS),\r\n      width = \"100%\",\r\n      step = 1\r\n    ))),\r\n  tabsetPanel(\r\n    tabPanel(\"Chart\",\r\n             uiOutput(\"ThePlotPlace\")),\r\n    tabPanel(\"Table\",\r\n             conditionalPanel('input.SelectedIndics.length>0 && input.SelectedGeos.length>0 && (!EmptyTable() || !isLoadingSpinnerVisible())',\r\n                              br(),\r\n                              downloadLink(\"TheDownloadLink\", \"\\u2B73 Download the selected data as Excel file\")),\r\n             br(),\r\n             uiOutput(\"TheTable\"))\r\n  )\r\n  \r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  output$tmp <- renderText(input$toggle)\r\n  \r\n  observe({\r\n    input$SelectedIndics %>% {\r\n      if(!is.null(.) && '\\u2295 Select all Main Indicators (can be slow!)' %in% .)\r\n        updateSelectInput(session,\r\n                          inputId = \"SelectedIndics\",\r\n                          selected=Main_Indicators_Codes)\r\n      if (!is.null(.) && '\\u2296 Remove all the selected indicators' %in% .)\r\n        updateSelectInput(session,\r\n                          inputId = \"SelectedIndics\",\r\n                          selected=character(0))\r\n    }})\r\n  \r\n  observe({\r\n    input$SelectedGeos %>% {\r\n      if (!is.null(.) && '\\u2295 Select all the Member States' %in% .)\r\n        updateSelectInput(session,\r\n                          inputId = \"SelectedGeos\",\r\n                          selected=DATA$EU_Members_geo_names$geo %>% .[nchar(.)==2])\r\n      if (!is.null(.) && '\\u2296 Remove all the selected countries' %in% .)\r\n        updateSelectInput(session,\r\n                          inputId = \"SelectedGeos\",\r\n                          selected=character(0))\r\n    }})\r\n  \r\n  observe({\r\n    input$SelectedScore  %>% {\r\n      if (!identical(.,'TRUE'))\r\n        updateSelectInput(session,\r\n                          inputId = \"SelectedIndics\",\r\n                          selected=grep('_popweighted_score',\r\n                                        input$SelectedIndics,\r\n                                        value=TRUE,invert=TRUE))\r\n    }})\r\n  \r\n  output$TheTable <- renderUI({\r\n    renderTbl(input)\r\n  })\r\n  \r\n  output$ThePlotPlace <- renderUI({\r\n    div(style=\"display: flex; flex-wrap: wrap;\",\r\n        selectPlots(input))\r\n  })\r\n  \r\n  output$TheDownloadLink <- downloadHandler(\r\n    filename = function() \r\n      paste0(\"Custom JAF extraction \",\r\n             Sys.time() %>% gsub(':',\".\",.,fixed=TRUE) %>% substr(1,19),\r\n             \".xlsx\"),\r\n    content = function(filename) {\r\n      dta <-\r\n        dataForExcel.(input)\r\n      col_nums <-\r\n        seq_along(colnames(dta))\r\n      wb <- \r\n        createWorkbook(creator='DG EMPL F4 Statistical Team')\r\n      addWorksheet(wb, zoom=75,\r\n                   sheetName=\r\n                     paste('JAF',\r\n                           ifelse(identical(input$SelectedScore,'TRUE'),'Score','Value'),\r\n                           ifelse(identical(input$SelectedLevel,'TRUE'),'Level','Change')))\r\n      writeData(wb, 1, startRow = 1, startCol = 1,\r\n                x=paste(ifelse(identical(input$SelectedScore,'TRUE'),\r\n                               'Standardised Indicator Score (not Value)',\r\n                               'Actual Indicator Value (not Score)'),\r\n                        ifelse(identical(input$SelectedLevel,'TRUE'),\r\n                               '\\u2014 Level (not Change)','\\u2014 Change (not Level)')))\r\n      writeData(wb, 1, startRow = 2, startCol = 1,\r\n                x = dta)\r\n      addStyle(wb, 1, style = createStyle(textDecoration = \"bold\"), \r\n               rows=1:2, cols=col_nums, gridExpand=TRUE)\r\n      addStyle(wb, 1, style = createStyle(halign = \"right\"), stack=TRUE,\r\n               rows=2, cols=col_nums %>% setdiff(1:3), gridExpand=TRUE)\r\n      freezePane(wb,1, firstActiveRow = 3, firstActiveCol = 4)\r\n      setColWidths(wb,1, cols=col_nums,\r\n                   widths=c(15, .82*max(nchar(dta$`Indicator Description`)), 10,\r\n                            rep.int(6,length(dta)-3)))\r\n      saveWorkbook(wb, filename, overwrite = TRUE)\r\n      session$sendCustomMessage(\"hideLoadingSpinner\",list(message=TRUE))\r\n    }\r\n  )\r\n  \r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"},{"name":"DESCRIPTION","content":"Title: JAF Indicators\r\nAuthor: Alek R\r\nAuthorUrl: \r\nLicense: MIT\r\nTags: JAF2R\r\nType: Shiny\r\n","type":"text"},{"name":"Readme.md","content":"TO DO\r\n","type":"text"}]
